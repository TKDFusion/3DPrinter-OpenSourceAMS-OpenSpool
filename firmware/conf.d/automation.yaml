script:
  - id: clear_filament_settings
    then:
      # publish to select template filament_brand
      - select.set:
          id: filament_brand
          option: ""
      - text_sensor.template.publish:
          id: filament_brand_code
          state: ""
      - select.set:
          id: filament_color
          option: ""
      # TODO: do I need to reset filament_color_hex ?
      - text_sensor.template.publish:
          id: filament_color_hex
          state: ""
      - number.set:
          id: filament_min_temp
          value: 150
      - number.set:
          id: filament_max_temp
          value: 300
      - text_sensor.template.publish:
          id: filament_type
          state: ""
  - id: preview_rfid_data
    then:
      - text_sensor.template.publish:
          id: nfc_preview
          state: !lambda |-
            auto pretty_json = [=]() -> std::string {
              DynamicJsonDocument doc(256);  // Adjust size as needed
              JsonObject root = doc.to<JsonObject>();
              
              // Filament Brand Code, Color Hex are only used for MQTT messages
              // They should not be stored on the tags
              // TODO: should brand be optional? 
              root["protocol"] = "openspool";
              root["version"] = "1.0";
              root["brand"] = id(filament_brand).state.c_str();
              root["color"] = id(filament_color).state.c_str();
              root["min_temp"] = id(filament_min_temp).state;
              root["max_temp"] = id(filament_max_temp).state;
              root["type"] = id(filament_type).state.c_str();

              std::string output;
              serializeJsonPretty(doc, output);
              return output;
            };
            return pretty_json();
  - id: publish_filament_setting
    then:
      - if:
          condition:
            and:
              - lambda: |-
                  if (id(filament_brand).state == "") {
                    ESP_LOGE("main", "Filament Brand cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_brand_code).state == "") {
                    ESP_LOGE("main", "Filament Brand Code cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_color).state == "") {
                    ESP_LOGE("main", "Filament Color cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_color_hex).state == "") {
                    ESP_LOGE("main", "Filament Color Hex cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_max_temp).state >= 300) {
                    ESP_LOGE("main", "Filament Min Temp must be less than 300");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_min_temp).state <= 150) {
                    ESP_LOGE("main", "Filament Max Temp must be greater than 150");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_type).state == "") {
                    ESP_LOGE("main", "Filament Type cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
          then:
            - mqtt.publish:
                topic: device/${bambu_serial_number}/request
                # TODO: validate all settings
                payload: !lambda |-
                  auto data = json::build_json([=](JsonObject root) {
                    auto print = root.createNestedObject("print");
                    print["sequence_id"] = "0";
                    print["command"] = "ams_filament_setting";
                    print["ams_id"] = 255;
                    print["tray_id"] = 254;
                    print["tray_color"] = id(filament_color_hex).state.c_str();
                    print["nozzle_temp_min"] = id(filament_min_temp).state; //TODO: string or int? 
                    print["nozzle_temp_max"] = id(filament_max_temp).state; //TODO: string or int? 
                    print["tray_type"] = id(filament_type).state.c_str();
                    print["setting_id"] = "";
                    print["tray_info_idx"] = id(filament_brand_code).state.c_str();
                    print["tray_type"] = id(filament_type).state.c_str();
                    //print["tray_sub_brands"] = "TPU";

                  });
                  ESP_LOGI("main", "Publishing %s", data.c_str());
                  return data;
