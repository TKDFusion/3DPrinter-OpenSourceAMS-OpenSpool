script:
  - id: clear_filament_settings #TODO: unused
    then:
      # publish to select template filament_brand
      - select.set:
          id: filament_brand
          option: "Generic"
      - text_sensor.template.publish:
          id: filament_brand_code
          state: ""
      - select.set:
          id: filament_color
          option: "white"
      - text_sensor.template.publish:
          id: filament_color_hex
          state: ""
      - text_sensor.template.publish:
          id: filament_color_hex_bambu
          state: ""
      - number.set:
          id: filament_min_temp
          value: 150
      - number.set:
          id: filament_max_temp
          value: 300
      - select.set:
          id: filament_type
          option: "PLA"
  - id: preview_rfid_data
    then:
      - text_sensor.template.publish:
          id: nfc_preview
          state: !lambda |-
            auto pretty_json = [=]() -> std::string {
              DynamicJsonDocument doc(256);  // Adjust size as needed
              JsonObject root = doc.to<JsonObject>();
              
              // Filament Brand Code, Color Hex are only used for MQTT messages
              // They should not be stored on the tags
              // TODO: should brand be optional? 
              root["protocol"] = "openspool";
              root["version"] = "1.0";
              root["brand"] = id(filament_brand).state.c_str();
              root["color"] = id(filament_color).state.c_str();
              root["min_temp"] = id(filament_min_temp).state;
              root["max_temp"] = id(filament_max_temp).state;
              //root["type"] = id(filament_type).state.c_str();
              root["brand"] = id(filament_brand).state.c_str();

              std::string output;
              serializeJsonPretty(doc, output);
              return output;
            };
            return pretty_json();

  - id: publish_filament_setting
    then:
      - if:
          condition:
            and:
              - lambda: |-
                  if (id(filament_brand).state == "" || id(filament_brand).state == "Unknown") {
                    ESP_LOGE("main", "Filament Brand cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_brand_code).state == "" || id(filament_brand_code).state == "Unknown") {
                    ESP_LOGE("main", "Filament Brand Code cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_color).state == "") {
                    ESP_LOGE("main", "Filament Color cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_color_hex).state == "") {
                    ESP_LOGE("main", "Filament Color Hex cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_max_temp).state >= 300) {
                    ESP_LOGE("main", "Filament Min Temp must be less than 300");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_min_temp).state <= 150) {
                    ESP_LOGE("main", "Filament Max Temp must be greater than 150");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_type).state == "") {
                    ESP_LOGE("main", "Filament Type cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
              - lambda: |-
                  if (id(filament_type).state == "") {
                    ESP_LOGE("main", "Filament Type cannot be empty");
                    return false;
                  } else {
                    return true;
                  }
          then:
            # - light.turn_on:
            #     id: neopixel_light
            #     effect: Flicker Green
            - mqtt.publish:
                topic: device/${bambu_serial_number}/request
                payload: !lambda |-
                  auto data = json::build_json([=](JsonObject root) {
                    auto print = root.createNestedObject("print");
                    print["sequence_id"] = "0";
                    print["command"] = "ams_filament_setting";
                    print["ams_id"] = 255; //TODO: support multiple AMS
                    print["tray_id"] = 254; //TODO: support multiple trays
                    print["tray_color"] = id(filament_color_hex).state.c_str();
                    print["nozzle_temp_min"] = id(filament_min_temp).state; //TODO: string or int? 
                    print["nozzle_temp_max"] = id(filament_max_temp).state; //TODO: string or int? 
                    print["tray_type"] = id(filament_type).state.c_str();
                    print["setting_id"] = "";
                    print["tray_info_idx"] = id(filament_brand_code).state.c_str();
                    print["tray_type"] = id(filament_type).state.c_str();
                    //print["tray_sub_brands"] = "TPU"; //TODO: support sub brands

                  });
                  ESP_LOGI("main", "Publishing %s", data.c_str());
                  return data;
            # - light.turn_off: #TODO: instead of turning off, return to previous state
            #   id: neopixel_light

  - id: generate_filament_brand_code
    then:
      - lambda: |-
          id(filament_sub_brand).publish_state("");
          // TPU
          if (id(filament_type).state == "TPU") {

            if (id(filament_brand).state == "Bambu") {
              id(filament_brand_code).publish_state("GFU01");
            } else { // Generic
              id(filament_brand_code).publish_state("GFU99");
              id(filament_sub_brand).publish_state("TPU");
            }
          } 
          // PLA
          else if (id(filament_type).state == "PLA") {

            if (id(filament_brand).state == "PolyTerrra") {
              id(filament_brand_code).publish_state("GFL01");
              id(filament_sub_brand).publish_state("PolyTerra PLA");
            } else if (id(filament_brand).state == "PolyLite") {
              id(filament_brand_code).publish_state("GFL00");
              id(filament_sub_brand).publish_state("PolyLite PLA");
            } else { // Generic
              id(filament_brand_code).publish_state("GFL99");
              id(filament_sub_brand).publish_state("PLA");
            }
          } 
          // PETG
          else if (id(filament_type).state == "PETG") {

            if (id(filament_brand).state == "Overture") {
              // TODO: find overture PETG brand code
            } else { // Generic
              id(filament_brand_code).publish_state("GFG99");
              id(filament_sub_brand).publish_state("PETG");
            }
          } 
          // ASA 
          else if (id(filament_type).state == "ASA") {

            // Generic
            id(filament_brand_code).publish_state("GFB98");
            id(filament_sub_brand).publish_state("ASA");
          } 
          // ABS
          else if (id(filament_type).state == "ABS") {

            // Generic
            id(filament_brand_code).publish_state("GFB99");
            id(filament_sub_brand).publish_state("ABS");
          } 
          // PC
          else if (id(filament_type).state == "PC") {

            // Generic
            id(filament_brand_code).publish_state("GFC99");
            id(filament_sub_brand).publish_state("PC");
          } 
          // PA
          else if (id(filament_type).state == "PA") {

            // Generic
            id(filament_brand_code).publish_state("GFN99");
          } 
          // PA-CF
          else if (id(filament_type).state == "PA-CF") {

            // Generic
            id(filament_brand_code).publish_state("GFN98");
            id(filament_sub_brand).publish_state("PLA-CF");
          } else {
            ESP_LOGE("main", "Unknown filament type: %s", id(filament_type).state.c_str());
          }
  - id: generate_filament_temperatures
    then:
      - if:
          condition:
            and:
              - lambda: |-
                  if (id(filament_type).state == "") {
                    ESP_LOGD("main", "skipping generate_filament_temperatures because filament_type is emptry");
                    return false;
                  } else {
                    return true;
                  }
          then:
            - lambda: |-
                if (id(filament_type).state == "TPU") {
                  if (id(filament_brand).state == "Generic") {
                    id(filament_min_temp).publish_state(200);
                    id(filament_max_temp).publish_state(250);
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for TPU: %s", id(filament_brand).state.c_str());
                    id(filament_min_temp).publish_state(200);
                    id(filament_max_temp).publish_state(250);
                  }
                }
                else if (id(filament_type).state == "PLA") {
                  if (id(filament_brand).state == "Generic") {
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for PLA: %s", id(filament_brand).state.c_str());
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  }
                }
                else if (id(filament_type).state == "PETG") {
                  if (id(filament_brand).state == "Generic") {
                    id(filament_min_temp).publish_state(220);
                    id(filament_max_temp).publish_state(270);
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for PETG: %s", id(filament_brand).state.c_str());
                    id(filament_min_temp).publish_state(220);
                    id(filament_max_temp).publish_state(270);
                  }
                }
                else if (id(filament_type).state == "ASA") {
                  if (id(filament_brand).state == "Generic") {
                    //TODO: find temps for ASA
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for ASA: %s", id(filament_brand).state.c_str());
                  }
                }
                else if (id(filament_type).state == "ABS") {
                  if (id(filament_brand).state == "Generic") {
                    id(filament_min_temp).publish_state(240);
                    id(filament_max_temp).publish_state(280);
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for ABS: %s", id(filament_brand).state.c_str());
                  }
                }
                else if (id(filament_type).state == "PVA") {
                  if (id(filament_brand).state == "Generic") {
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for PVA: %s", id(filament_brand).state.c_str());
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  }
                }
                else if (id(filament_type).state == "PA-CF") {
                  if (id(filament_brand).state == "Generic") {
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for PA-CF: %s", id(filament_brand).state.c_str());
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  }
                }
                else if (id(filament_type).state == "PC") {
                  if (id(filament_brand).state == "Generic") {
                    //TODO: find temps for PC
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for PC: %s", id(filament_brand).state.c_str());
                  }
                }
                else if (id(filament_type).state == "PA") {
                  if (id(filament_brand).state == "Generic") {
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  } else {
                    ESP_LOGW("main", "Unknown temperatures for PA: %s", id(filament_brand).state.c_str());
                    id(filament_min_temp).publish_state(190);
                    id(filament_max_temp).publish_state(240);
                  }
                }
                else {
                  ESP_LOGW("main", "Unknown filament type: %s", id(filament_type).state.c_str());
                }

