substitutions:
  # spi_data_rate: 200kHz
  # update_interval: "2s"
  spi_data_rate: 1Mhz
  update_interval: "1s"

binary_sensor:
  - platform: template
    name: "NFC Tag Present"
    id: nfc_tag_present0
    state_topic:
    icon: mdi:circle-double
    web_server:
      sorting_group_id: sorting_group_rfid

spi:
  - id: spi_i2c_bus_a
    clk_pin: ${rfid1_clk_pin} # SCK # Breadboard=GPIO39, PCB=GPIO36
    miso_pin: ${rfid1_miso_pin} # MO/SDA/TX (MISO)
    mosi_pin: ${rfid1_mosi_pin} # M (MOSI)
    interface: ${rfid1_spi_interface}

pn532_spi:
  - id: rfid_reader_spi_0
    cs_pin: ${rfid1_ss_pin} # NSS/SCL/RX # Breadboard=GPIO33, PCB=GPIO34
    spi_id: spi_i2c_bus_a
    data_rate: ${spi_data_rate}
    update_interval: ${update_interval}
    on_tag_removed:
      then:
        - script.execute: set_led_white #TODO: don't assume white instead default back to the default led state (breathing, blinkinig ect..)
        - binary_sensor.template.publish:
            id: nfc_tag_present0
            state: OFF
        - lambda: |-
            id(filament_raw_data0).publish_state("");
    on_tag:
      then:
        - binary_sensor.template.publish:
            id: nfc_tag_present0
            state: ON
        - lambda: |-
            bool is_valid_openspool = false;
            std::string payload;

            if (tag.has_ndef_message()) {
              auto records = tag.get_ndef_message()->get_records();
              if (records.size() == 1 && records[0]->get_type() == "application/json") {
                payload = records[0]->get_payload();
                ESP_LOGD("NFC", "Payload: %s", payload.c_str());
                id(filament_raw_data0).publish_state(payload);

                // Parse JSON and check for OpenSpool protocol
                auto parse_result = json::parse_json(payload, [&](JsonObject root) {
                  is_valid_openspool = root["protocol"] == "openspool";
                  return true;
                });

                if (!parse_result) {
                  ESP_LOGE("NFC", "Failed to parse JSON payload");
                }
              } else {
                ESP_LOGE("NFC", "Invalid NDEF message structure");
              }
            } else {
              ESP_LOGD("NFC", "Tag found without NDEF message");
            }

            // Update states
            id(rfid_reader_spi_0_tag_parsed).publish_state(true);
            id(rfid_reader_spi_0_tag_is_openspool).publish_state(is_valid_openspool);

            // Set LED color
            if (is_valid_openspool) {
              id(set_led_green).execute();
              //TODO: Generate and send MQTT message here
              if (!payload.empty()) {
                //id(publish_filament_settings_rfid).execute(payload, 0, 0); // Adjust AMS ID and tray as needed
              }
            } else {
              id(set_led_red).execute();
            }
        - if:
            condition:
              and:
                #TODO: Verify mqtt is connected
                - lambda: 'return id(filament_raw_data0).state != "";'
                - lambda: 'return id(filament_raw_data0).state != "{}";'
                - binary_sensor.is_on: rfid_reader_spi_0_tag_is_openspool
                - binary_sensor.is_on: rfid_reader_spi_0_tag_parsed
            then:
              - mqtt.publish:
                  topic: !lambda 'return "device/" + id(bambu_serial_number).state + "/request";'
                  # 255 = external ams
                  # 254 = external tray 
                  payload: !lambda 'return bambulabs::generate_mqtt_payload( id(filament_raw_data0).state, 255, 254 );'
text_sensor:
  - platform: template
    name: "NFC Raw Data"
    id: filament_raw_data0
    internal: false # Always show raw data 0
    state_topic:
    icon: mdi:nfc-variant
    web_server:
      sorting_group_id: sorting_group_rfid
    filters:
      - lambda: |-
          auto pretty_json = [](const std::string &x) -> std::string {
            if (x.empty()) {
              ESP_LOGD("NFC", "Input string is empty");
              return x;
            }     
            ESP_LOGD("NFC", "Input string: %s", x.c_str());
            
            StaticJsonDocument<1024> doc;  // Use StaticJsonDocument for memory efficiency
            DeserializationError error = deserializeJson(doc, x);
            if (error) {
              ESP_LOGE("NFC", "JSON parsing failed: %s", error.c_str());
              return "";
            }
            
            if (!doc.is<JsonObject>()) {
              ESP_LOGE("NFC", "Invalid JSON: Not an object");
              return "";
            }
            
            const char* required_fields[] = {"protocol", "color_hex", "type", "min_temp", "max_temp", "brand"};
            for (const char* field : required_fields) {
              if (!doc.containsKey(field)) {
                ESP_LOGE("NFC", "Invalid JSON: Missing required field '%s'", field);
                return "";
              }
            }
            
            std::string output;
            serializeJsonPretty(doc, output);
            
            if (output.length() > 1024) {
              ESP_LOGE("NFC", "Prettified JSON exceeds 1024 bytes");
              return "";
            }
            
            return output;
          };
          return pretty_json(x);
    # on_value:
    #   then:
    #     - script.execute:
    #         id: publish_filament_settings_rfid
    #         x: !lambda "return std::string(x);"
    #         ams_id: 255 #TODO: Conditional depending on printer type?
    #         ams_tray: 254 #TODO: Conditional depending on printer type?
  - platform: template
    name: "NFC Preview"
    id: nfc_preview
    state_topic:
    icon: mdi:nfc-search-variant
    web_server:
      sorting_group_id: sorting_group_rfid

# Create virtual button that can be pressed in the gui
button:
  - platform: template
    name: "Write NFC"
    icon: mdi:nfc-tap
    state_topic:
    web_server:
      sorting_group_id: sorting_group_rfid
    on_press:
      then:
        - if:
            condition:
              and:
                - lambda: |-
                    if (!id(nfc_tag_present0).state) {
                      ESP_LOGE("main", "NFC Tag not present on RFID Reader 0");
                      return false;
                    } else {
                      return true;
                    }
                - lambda: |-
                    if (id(filament_brand).state == "") {
                      ESP_LOGE("main", "Filament Brand cannot be empty");
                      return false;
                    } else {
                      return true;
                    }
                - lambda: |-
                    if (id(filament_brand_code).state == "") {
                      ESP_LOGE("main", "Filament Brand Code cannot be empty");
                      return false;
                    } else {
                      return true;
                    }
                - lambda: |-
                    if (id(filament_color_hex).state == "") {
                      ESP_LOGE("main", "Filament Color Hex cannot be empty");
                      return false;
                    } else {
                      return true;
                    }
                - lambda: |-
                    if (id(filament_max_temp).state >= 300) {
                      ESP_LOGE("main", "Filament Min Temp must be less than 300");
                      return false;
                    } else {
                      return true;
                    }
                - lambda: |-
                    if (id(filament_min_temp).state <= 150) {
                      ESP_LOGE("main", "Filament Max Temp must be greater than 150");
                      return false;
                    } else {
                      return true;
                    }
                - lambda: |-
                    if (id(filament_type).state == "") {
                      ESP_LOGE("main", "Filament Type cannot be empty");
                      return false;
                    } else {
                      return true;
                    }
            then:
              - lambda: |-
                  auto message = new nfc::NdefMessage();
                  auto record = std::make_unique<nfc::NdefRecord>();
                  record->set_tnf(nfc::TNF_WELL_KNOWN);
                  record->set_type("application/json");
                  //TODO: DynamicJsonDocument is memory inefficient, use StaticJsonDocument instead
                  DynamicJsonDocument doc(512);
                  JsonObject root = doc.to<JsonObject>();
                  root["version"] = "1.0";
                  root["protocol"] = "openspool";
                  root["color_hex"] = id(filament_color_hex).state;
                  root["type"] = id(filament_type).state;
                  root["min_temp"] = id(filament_min_temp).state;
                  root["max_temp"] = id(filament_max_temp).state;
                  root["brand"] = id(filament_brand).state;

                  std::string json_string;
                  serializeJson(root, json_string);

                  ESP_LOGI("rfid", "JSON content to be written: %s", json_string.c_str());

                  record->set_payload(json_string);

                  message->add_record(std::move(record));

                  id(rfid_reader_spi_0).write_mode(message); //TODO: Write to the correct RFID reader
                  ESP_LOGI("rfid", "Writing JSON NDEF message to tag");
                  //TODO: do I need to set back to read mode?
            else:
              - lambda: |-
                  ESP_LOGI("rfid", "NFC Tag not present");

logger:
  level: DEBUG
  logs:
    pn532: DEBUG
    nfc: DEBUG
    i2c: DEBUG
    # "": NONE
