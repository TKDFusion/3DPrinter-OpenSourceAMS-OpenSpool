---
select:
  #TODO: printer model is currently unused, but will be needed for setting AMS type
  - platform: template
    name: Printer Model
    id: bambu_model
    options:
      - "A1Mini"
      - "A1"
      - "P1P/P1S"
      - "X1C/X1E"
    optimistic: true
    restore_value: true
    state_topic:
    icon: mdi:printer-3d
    web_server:
      sorting_group_id: sorting_group_printer_settings
text_sensor:
  - platform: template
    name: "OpenSpool URL"
    id: openspool_url
    state_topic:
    icon: mdi:web
    web_server:
      sorting_group_id: sorting_group_extra
    lambda: |-
      std::string mac = id(mac_address).state;
      // Extract just the last 6 characters (3 pairs of hex digits)
      std::string last_6 = mac.substr(9, 2) + mac.substr(12, 2) + mac.substr(15, 2);
      return {"http://openspool-" + last_6 + ".local"};
  - platform: template
    name: "BambuHandy URL"
    id: bambuhandy_url
    state_topic:
    icon: mdi:cellphone
    web_server:
      sorting_group_id: sorting_group_extra
    lambda: |-
      return {"bambulab://"};
text:
  - platform: template
    id: bambu_serial_number
    state_topic:
    name: Printer Serial Number
    optimistic: true
    mode: text
    restore_value: true
    icon: mdi:barcode
    web_server:
      sorting_group_id: sorting_group_printer_settings
    # on_value:
    #   then:
    #       - script.execute: check_mqtt_creds #TODO: Enable once this is merged: https://github.com/esphome/esphome/pull/7716
    #     lambda: |-
    #       id(bambu_printer_status).topic = "device/" + x + "/report";
  - platform: template
    name: Printer Lan Access Code
    id: bambu_lan_access_code
    state_topic:
    optimistic: true
    mode: password
    restore_value: true
    icon: mdi:lock
    web_server:
      sorting_group_id: sorting_group_printer_settings
    on_value:
      then:
        lambda: |-
          id(bambu_mqtt).set_password(x.c_str());
  #     - script.execute: check_mqtt_creds #TODO: Enable once this is merged: https://github.com/esphome/esphome/pull/7716
  - platform: template
    name: Printer IP Address
    id: bambu_ip_address
    state_topic:
    optimistic: true
    mode: text
    restore_value: true
    icon: mdi:ip
    web_server:
      sorting_group_id: sorting_group_printer_settings
    on_value:
      then:
        lambda: |-
          id(bambu_mqtt).set_broker_address(x.c_str());
  #       - script.execute: check_mqtt_creds #TODO: Enable once this is merged: https://github.com/esphome/esphome/pull/7716

button:
  - platform: restart
    name: "Restart OpenSpool"
    id: restart_openspool
    state_topic:
    entity_category: diagnostic
  - platform: template
    name: "OpenSpool Create Tag"
    id: write_url_button
    state_topic:
    icon: mdi:web
    web_server:
      sorting_group_id: sorting_group_extra
    on_press:
      then: 
        # TODO: binary sensor that shows reader write_mode? 
        # TODO: blink lights when light mode changes
        - logger.log: "Writing tag" #TODO: change log namespace
        - lambda: |-
            // This causes esp32 to lockup, stackoverflow perhaps? 
            // Leaving this code here as an example of what not to do

            // std::string url = id(openspool_url).state;
            // nfc::NdefMessage message;
            // message.add_uri_record(url);
            //id(rfid_reader_spi_0).write_mode(&message);

            // This also causes it to lockup

            // std::string url = id(openspool_url).state;
            // auto message = std::make_unique<nfc::NdefMessage>();
            // message->add_uri_record(url);
            // id(rfid_reader_spi_0).write_mode(message.get());

            // deleting the message also causes a lockup

            // std::string url = id(openspool_url).state;
            // auto message = new nfc::NdefMessage();
            // message->add_uri_record(url);
            // id(rfid_reader_spi_0).write_mode(message);
            // delete message; 

            std::string url = id(openspool_url).state;
            ESP_LOGD("NFC", "Writing URL: %s", url.c_str());
            auto message = new nfc::NdefMessage();
            message->add_uri_record(url);
            id(rfid_reader_spi_0).write_mode(message);
        - wait_until:
            not: 
              pn532.is_writing:
                id: rfid_reader_spi_0
        - logger.log: "Finished writing tag" #TODO: change log namespace
  - platform: template
    name: "BambuHandy Create Tag"
    id: write_bambuhandy_url_button
    state_topic:
    icon: mdi:cellphone
    web_server:
      sorting_group_id: sorting_group_extra
    on_press:
      then: 
        # TODO: binary sensor that shows reader write_mode? 
        # TODO: blink lights when light mode changes
        - logger.log: "Writing tag" #TODO: change log namespace
        - lambda: |-
            std::string url = id(bambuhandy_url).state;
            ESP_LOGD("NFC", "Writing URL: %s", url.c_str());
            auto message = new nfc::NdefMessage();
            message->add_uri_record(url);
            id(rfid_reader_spi_0).write_mode(message);
        - wait_until:
            not: 
              pn532.is_writing:
                id: rfid_reader_spi_0
        - logger.log: "Finished writing tag" #TODO: change log namespace   

#TODO: Show the current state of the printer

# ACTION_IDS = {
#     "default": "Unknown",
#     -1: "Idle",
#     0: "Printing",
#     1: "Auto Bed Leveling",
#     2: "Heatbed Preheating",
#     3: "Sweeping XY Mech Mode",
#     4: "Changing Filament",
#     5: "M400 Pause",
#     6: "Paused due to filament runout",
#     7: "Heating Hotend",
#     8: "Calibrating Extrusion",
#     9: "Scanning Bed Surface",
#     10: "Inspecting First Layer",
#     11: "Identifying Build Plate Type",
#     12: "Calibrating Micro Lidar",
#     13: "Homing Toolhead",
#     14: "Cleaning Nozzle Tip",
#     15: "Checking Extruder Temperature",
#     16: "Printing was paused by the user",
#     17: "Pause of front cover falling",
#     18: "Calibrating Micro Lidar",
#     19: "Calibrating Extrusion Flow",
#     20: "Paused due to nozzle temperature malfunction",
#     21: "Paused due to heat bed temperature malfunction"
#     255: A1 mini uses this, most likely as idle
# }
